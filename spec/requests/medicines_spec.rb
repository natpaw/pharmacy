require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/medicines", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # medicine. As you add validations to medicine, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryBot.build(:medicine).attributes.symbolize_keys }
 
  let(:invalid_attributes) { FactoryBot.attributes_for(:medicine, quantity: 'hhh') }
  
  let(:pharmacist) { FactoryBot.create(:pharmacist)}

  describe "GET /index" do
    it "renders a successful response" do
      Medicine.create! valid_attributes
      get medicines_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      medicine = Medicine.create! valid_attributes
	  sign_in pharmacist
      get medicine_url(medicine)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
	  sign_in pharmacist
      get new_medicine_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      medicine = Medicine.create! valid_attributes
	  sign_in pharmacist
      get edit_medicine_url(medicine)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new medicine" do
		sign_in pharmacist
        expect {
          post medicines_url, params: { medicine: valid_attributes }
        }.to change(Medicine, :count).by(1)
      end

      it "redirects to the created medicine" do
		sign_in pharmacist
        post medicines_url, params: { medicine: valid_attributes }
        expect(response).to redirect_to(medicine_url(Medicine.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new medicine" do
		sign_in pharmacist
        expect {
          post medicines_url, params: { medicine: invalid_attributes }
        }.to change(Medicine, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
		sign_in pharmacist
        post medicines_url, params: { medicine: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { FactoryBot.attributes_for(:medicine, name: 'Aspirin') }

      it "updates the requested medicine" do
        medicine = Medicine.create! valid_attributes
		sign_in pharmacist
        patch medicine_url(medicine), params: { medicine: new_attributes }
        medicine.reload
        expect(assigns(:medicine).attributes['name']).to match(new_attributes[:name])
      end

      it "redirects to the medicine" do
        medicine = Medicine.create! valid_attributes
		sign_in pharmacist
        patch medicine_url(medicine), params: { medicine: new_attributes }
        medicine.reload
        expect(response).to redirect_to(medicine_url(medicine))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        medicine = Medicine.create! valid_attributes
		sign_in pharmacist
        patch medicine_url(medicine), params: { medicine: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested medicine" do
      medicine = Medicine.create! valid_attributes
	  sign_in pharmacist
      expect {
        delete medicine_url(medicine)
      }.to change(Medicine, :count).by(-1)
    end

    it "redirects to the medicines list" do
      medicine = Medicine.create! valid_attributes
	  sign_in pharmacist
      delete medicine_url(medicine)
      expect(response).to redirect_to(medicines_url)
    end
  end
end
