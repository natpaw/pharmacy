require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/pharmacists", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # pharmacist. As you add validations to pharmacist, be sure to
  # adjust the attributes here as well.
  
  let(:user) { FactoryBot.create(:user)}
  let(:pharmacist) { build :pharmacist, user_id: user.id }
  let(:invalid_pharmacist) { build :pharmacist, user_id: ''}

  describe "GET /index" do
    it "renders a successful response" do
      pharmacist = Pharmacist.create(user_id: user.id)
      get pharmacists_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      pharmacist = Pharmacist.create(user_id: user.id)
      get pharmacist_url(pharmacist)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_pharmacist_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      pharmacist = Pharmacist.create(user_id: user.id)
      get edit_pharmacist_url(pharmacist)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new pharmacist" do
        expect {
          post pharmacists_url, params: { pharmacist: pharmacist.attributes }
        }.to change(Pharmacist, :count).by(1)
      end

      it "redirects to the created pharmacist" do
        post pharmacists_url, params: { pharmacist: pharmacist.attributes }
        expect(response).to redirect_to(pharmacist_url(Pharmacist.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new pharmacist" do
        expect {
          post pharmacists_url, params: { pharmacist: invalid_pharmacist.attributes }
        }.to change(Pharmacist, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post pharmacists_url, params: { pharmacist: invalid_pharmacist.attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
	  let(:new_user) { FactoryBot.create(:user)}
      let(:new_pharmacist) { build :pharmacist, user_id: new_user.id }

      it "updates the requested pharmacist" do
        pharmacist = Pharmacist.create(user_id: user.id)
        patch pharmacist_url(pharmacist), params: { pharmacist: new_pharmacist.attributes }
        pharmacist.reload
        expect(assigns(:pharmacist).attributes['user_id']).to match(new_user.id)
      end

      it "redirects to the pharmacist" do
        pharmacist = Pharmacist.create(user_id: user.id)
        patch pharmacist_url(pharmacist), params: { pharmacist: new_pharmacist.attributes }
        pharmacist.reload
        expect(response).to redirect_to(pharmacist_url(pharmacist))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        pharmacist = Pharmacist.create(user_id: user.id)
        patch pharmacist_url(pharmacist), params: { pharmacist: invalid_pharmacist.attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested pharmacist" do
      pharmacist = Pharmacist.create(user_id: user.id)
      expect {
        delete pharmacist_url(pharmacist)
      }.to change(Pharmacist, :count).by(-1)
    end

    it "redirects to the pharmacists list" do
      pharmacist = Pharmacist.create(user_id: user.id)
      delete pharmacist_url(pharmacist)
      expect(response).to redirect_to(pharmacists_url)
    end
  end
end
